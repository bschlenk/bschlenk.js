#!/usr/bin/env node

import fs from 'fs'

run()

function run() {
  const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8'))

  const isTypescript = fs.existsSync('./tsconfig.json')
  const isReact =
    pkg.dependencies['react'] ||
    pkg.dependencies['react-dom'] ||
    pkg.peerDependencies['react'] ||
    pkg.peerDependencies['react-dom']

  const types = [
    isTypescript ? 'typescript' : 'javascript',
    ...(isReact ? ['react'] : []),
  ]

  const fileGlobs = makeFileGlobs(isTypescript, isReact)

  console.log(`Detected: ${types.join(', ')}`)
  console.log('Writing eslint.config.js')

  const config = `\
import bschlenk, { globals } from '@bschlenk/eslint-config'

export default [
  { ignores: ['**/dist/'] },
  { files: [${fileGlobs.map((g) => `'${g}'`).join(', ')}] },

  {
    languageOptions: {
${
  isTypescript
    ? `\
      parserOptions: { project: './tsconfig.json' },\n`
    : ''
}\
      globals: { ...globals.browser, ...globals.es2022 },
    },
  },

  ...${
    isTypescript ? 'bschlenk.configs.typescript' : 'bschlenk.configs.javascript'
  },
${isReact ? '  ...bschlenk.configs.react' : ''}\
]
`

  fs.writeFileSync('./eslint.config.js', config)
}

function makeFileGlobs(isTypescript, isReact) {
  const globs = ['**/*.js']

  if (isReact) {
    globs.push('**/*.jsx')
  }

  if (isTypescript) {
    globs.push('**/*.ts')

    if (isReact) {
      globs.push('**/*.tsx')
    }
  }

  return globs
}
